// <auto-generated />
#nullable enable

namespace Equatable.Entities
{
    partial class Priority : global::System.IEquatable<Priority?>
    {
        /// <inheritdoc />
        public bool Equals(Priority? other)
        {
            return other is not null
                && base.Equals(other)
                && global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(Name, other.Name)
                && global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(Description, other.Description)
                && global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(DisplayOrder, other.DisplayOrder)
                && global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(IsActive, other.IsActive);

        }

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            return Equals(obj as Priority);
        }

        /// <inheritdoc />
        public static bool operator ==(Priority? left, Priority? right)
        {
            return global::System.Collections.Generic.EqualityComparer<Priority?>.Default.Equals(left, right);
        }

        /// <inheritdoc />
        public static bool operator !=(Priority? left, Priority? right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public override int GetHashCode(){
            int hashCode = -1812696380;
            hashCode = (hashCode * -1521134295) + base.GetHashCode();
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<string>.Default.GetHashCode(Name!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<string?>.Default.GetHashCode(Description!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(DisplayOrder!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<bool>.Default.GetHashCode(IsActive!);
            return hashCode;

        }

    }
}
