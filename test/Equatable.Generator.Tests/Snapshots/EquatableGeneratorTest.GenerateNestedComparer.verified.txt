// <auto-generated />
#nullable enable

namespace Equatable.Entities
{
    partial class Nested
    {
        partial class Animal : global::System.IEquatable<global::Equatable.Entities.Nested.Animal?>
        {
            /// <inheritdoc />
            public bool Equals(global::Equatable.Entities.Nested.Animal? other)
            {
                return !(other is null)
                    && Id == other.Id
                    && global::System.Collections.Generic.EqualityComparer<global::System.String?>.Default.Equals(Name, other.Name)
                    && global::System.Collections.Generic.EqualityComparer<global::System.String?>.Default.Equals(Type, other.Type);

            }

            /// <inheritdoc />
            public override bool Equals(object? obj)
            {
                return Equals(obj as global::Equatable.Entities.Nested.Animal);
            }

            /// <inheritdoc />
            public static bool operator ==(global::Equatable.Entities.Nested.Animal? left, global::Equatable.Entities.Nested.Animal? right)
            {
                return global::System.Collections.Generic.EqualityComparer<global::Equatable.Entities.Nested.Animal?>.Default.Equals(left, right);
            }

            /// <inheritdoc />
            public static bool operator !=(global::Equatable.Entities.Nested.Animal? left, global::Equatable.Entities.Nested.Animal? right)
            {
                return !(left == right);
            }

            /// <inheritdoc />
            public override int GetHashCode(){
                int hashCode = -678952093;
                hashCode = (hashCode * -1521134295) + Id.GetHashCode();
                hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<global::System.String?>.Default.GetHashCode(Name!);
                hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<global::System.String?>.Default.GetHashCode(Type!);
                return hashCode;

            }

        }
    }
}
