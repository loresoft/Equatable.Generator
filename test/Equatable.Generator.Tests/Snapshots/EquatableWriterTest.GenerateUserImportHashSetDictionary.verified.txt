// <auto-generated />
#nullable enable

namespace Equatable.Entities
{
    partial class UserImport : global::System.IEquatable<global::Equatable.Entities.UserImport?>
    {
        /// <inheritdoc />
        public bool Equals(global::Equatable.Entities.UserImport? other)
        {
            return !(other is null)
                && global::System.StringComparer.OrdinalIgnoreCase.Equals(EmailAddress, other.EmailAddress)
                && global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(DisplayName, other.DisplayName)
                && global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(FirstName, other.FirstName)
                && global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(LastName, other.LastName)
                && global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset?>.Default.Equals(LockoutEnd, other.LockoutEnd)
                && global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset?>.Default.Equals(LastLogin, other.LastLogin)
                && HashSetEquals(Roles, other.Roles)
                && DictionaryEquals(Permissions, other.Permissions);

            static bool DictionaryEquals<TKey, TValue>(global::System.Collections.Generic.IDictionary<TKey, TValue>? left, global::System.Collections.Generic.IDictionary<TKey, TValue>? right)
            {
                if (global::System.Object.ReferenceEquals(left, right))
                    return true;

                if (left is null || right is null)
                    return false;

                if (left.Count != right.Count)
                    return false;

                foreach (var pair in left)
                {
                    if (!right.TryGetValue(pair.Key, out var value))
                        return false;

                    if (!global::System.Collections.Generic.EqualityComparer<TValue>.Default.Equals(pair.Value, value))
                        return false;

                }

                return true;
            }

            static bool HashSetEquals<T>(global::System.Collections.Generic.IEnumerable<T>? left, global::System.Collections.Generic.IEnumerable<T>? right)
            {
                if (global::System.Object.ReferenceEquals(left, right))
                    return true;

                if (left is null || right is null)
                    return false;

                if (left is global::System.Collections.Generic.ISet<T> leftSet)
                    return leftSet.SetEquals(right);

                if (right is global::System.Collections.Generic.ISet<T> rightSet)
                    return rightSet.SetEquals(left);

                var hashSet = new global::System.Collections.Generic.HashSet<T>(left, global::System.Collections.Generic.EqualityComparer<T>.Default);
                return hashSet.SetEquals(right);
            }

        }

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            return Equals(obj as global::Equatable.Entities.UserImport);
        }

        /// <inheritdoc />
        public static bool operator ==(global::Equatable.Entities.UserImport? left, global::Equatable.Entities.UserImport? right)
        {
            return global::System.Collections.Generic.EqualityComparer<global::Equatable.Entities.UserImport?>.Default.Equals(left, right);
        }

        /// <inheritdoc />
        public static bool operator !=(global::Equatable.Entities.UserImport? left, global::Equatable.Entities.UserImport? right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public override int GetHashCode(){
            int hashCode = -1758092530;
            hashCode = (hashCode * -1521134295) + global::System.StringComparer.OrdinalIgnoreCase.GetHashCode(EmailAddress!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<string?>.Default.GetHashCode(DisplayName!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<string?>.Default.GetHashCode(FirstName!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<string?>.Default.GetHashCode(LastName!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset?>.Default.GetHashCode(LockoutEnd!);
            hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<System.DateTimeOffset?>.Default.GetHashCode(LastLogin!);
            hashCode = (hashCode * -1521134295) + HashSetHashCode(Roles);
            hashCode = (hashCode * -1521134295) + DictionaryHashCode(Permissions);
            return hashCode;

            static int DictionaryHashCode<TKey, TValue>(global::System.Collections.Generic.IDictionary<TKey, TValue>? items)
            {
                if (items is null)
                    return 0;

                int hashCode = -1758092530;

                // sort by key to ensure dictionary with different order are the same
                foreach (var item in global::System.Linq.Enumerable.OrderBy(items, d => d.Key))
                {
                    hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<TKey>.Default.GetHashCode(item.Key!);
                    hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<TValue>.Default.GetHashCode(item.Value!);
                }

                return hashCode;
            }

            static int HashSetHashCode<T>(global::System.Collections.Generic.IEnumerable<T>? items)
            {
                if (items is null)
                    return 0;

                int hashCode = -1758092530;

                // sort to ensure set with different order are the same
                foreach (var item in global::System.Linq.Enumerable.OrderBy(items, d => d))
                    hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<T>.Default.GetHashCode(item!);

                return hashCode;
            }

        }

    }
}
