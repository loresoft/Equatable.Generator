using Equatable.SourceGenerator.Models;

using Microsoft.CodeAnalysis;

namespace Equatable.SourceGenerator;

public static class EquatableWriter
{
    public static string Generate(EquatableClass entityClass)
    {
        if (entityClass == null)
            throw new ArgumentNullException(nameof(entityClass));

        var codeBuilder = new IndentedStringBuilder();
        codeBuilder
            .AppendLine("// <auto-generated />")
            .AppendLine("#nullable enable")
            .AppendLine();

        codeBuilder
            .Append("namespace ")
            .AppendLine(entityClass.EntityNamespace)
            .AppendLine("{")
            .IncrementIndent();

        codeBuilder
            .Append("partial class ")
            .Append(entityClass.EntityName)
            .Append(" : global::System.IEquatable<")
            .Append(entityClass.EntityName)
            .AppendLine("?>")
            .AppendLine("{")
            .IncrementIndent();

        GenerateEquatable(codeBuilder, entityClass);
        GenerateEquals(codeBuilder, entityClass);
        GenerateHashCode(codeBuilder, entityClass);

        codeBuilder
            .DecrementIndent()
            .AppendLine("}") // class
            .DecrementIndent()
            .AppendLine("}"); // namespace

        return codeBuilder.ToString();
    }

    private static void GenerateEquatable(IndentedStringBuilder codeBuilder, EquatableClass entityClass)
    {
        codeBuilder
            .AppendLine("/// <inheritdoc />")
            .Append("public bool Equals(")
            .Append(entityClass.EntityName)
            .AppendLine("? other)")
            .AppendLine("{")
            .IncrementIndent();

        codeBuilder
            .Append("return other is not null");

        foreach (var entityProperty in entityClass.Properties)
        {
            switch (entityProperty.ComparerType)
            {
                case ComparerTypes.Dictionary:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append("DictionaryEquals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
                case ComparerTypes.HashSet:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append("HashSetEquals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
                case ComparerTypes.Reference:
                    break;
                case ComparerTypes.Sequence:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append("SequenceEquals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
                case ComparerTypes.String:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append("global::System.StringComparer.")
                        .Append(entityProperty.ComparerName)
                        .Append(".Equals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
                case ComparerTypes.Custom:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append(entityProperty.ComparerName)
                        .Append(".")
                        .Append(entityProperty.ComparerInstance ?? "Default")
                        .Append(".Equals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
                default:
                    codeBuilder
                        .AppendLine()
                        .Append("    && ")
                        .Append("global::System.Collections.Generic.EqualityComparer<")
                        .Append(entityProperty.PropertyType)
                        .Append(">.Default.Equals(")
                        .Append(entityProperty.PropertyName)
                        .Append(", other.")
                        .Append(entityProperty.PropertyName)
                        .Append(")");
                    break;
            }
        }

        codeBuilder
            .AppendLine(";")
            .AppendLine();

        GenerateEquatableFunctions(codeBuilder, entityClass);

        codeBuilder
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();
    }

    private static void GenerateEquatableFunctions(IndentedStringBuilder codeBuilder, EquatableClass entityClass)
    {
        if (entityClass == null)
            return;

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.Dictionary))
        {
            codeBuilder
                .AppendLine("static bool DictionaryEquals<TKey, TValue>(global::System.Collections.Generic.IDictionary<TKey, TValue>? left, global::System.Collections.Generic.IDictionary<TKey, TValue>? right)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (global::System.Object.ReferenceEquals(left, right))")
                .AppendLine("    return true;")
                .AppendLine()
                .AppendLine("if (left == null || right == null)")
                .AppendLine("    return false;")
                .AppendLine()
                .AppendLine("if (left.Count != right.Count)")
                .AppendLine("    return false;")
                .AppendLine();

            codeBuilder
                .AppendLine("foreach (var pair in left)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (!right.TryGetValue(pair.Key, out var value))")
                .AppendLine("    return false;")
                .AppendLine()
                .AppendLine("if (!global::System.Collections.Generic.EqualityComparer<TValue>.Default.Equals(pair.Value, value))")
                .AppendLine("    return false;")
                .AppendLine()
                .DecrementIndent()
                .AppendLine("}"); // foreach

            codeBuilder
                .AppendLine()
                .AppendLine("return true;")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.HashSet))
        {
            codeBuilder
                .AppendLine("static bool HashSetEquals<T>(global::System.Collections.Generic.IEnumerable<T>? left, global::System.Collections.Generic.IEnumerable<T>? right)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (global::System.Object.ReferenceEquals(left, right))")
                .AppendLine("    return true;")
                .AppendLine()
                .AppendLine("if (left == null || right == null)")
                .AppendLine("    return false;")
                .AppendLine()
                .AppendLine("if (left is ISet<TValue> leftSet)")
                .AppendLine("    return leftSet.SetEquals(right);")
                .AppendLine()
                .AppendLine("if (right is ISet<TValue> rightSet)")
                .AppendLine("    return rightSet.SetEquals(left);")
                .AppendLine()
                .AppendLine("var hashSet = new HashSet<TValue>(left, global::System.Collections.Generic.EqualityComparer<T>.Default);")
                .AppendLine("return hashSet.SetEquals(right);")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.Sequence))
        {
            codeBuilder
                .AppendLine("static bool SequenceEquals<T>(global::System.Collections.Generic.IEnumerable<T>? left, global::System.Collections.Generic.IEnumerable<T>? right)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (global::System.Object.ReferenceEquals(left, right))")
                .AppendLine("    return true;")
                .AppendLine()
                .AppendLine("if (left == null || right == null)")
                .AppendLine("    return false;")
                .AppendLine()
                .AppendLine("return global::System.Linq.Enumerable.SequenceEqual(left, right, global::System.Collections.Generic.EqualityComparer<T>.Default);")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }
    }

    private static void GenerateEquals(IndentedStringBuilder codeBuilder, EquatableClass entityClass)
    {
        codeBuilder
            .AppendLine("/// <inheritdoc />")
            .AppendLine("public override bool Equals(object? obj)")
            .AppendLine("{")
            .IncrementIndent()
            .Append("return Equals(obj as ")
            .Append(entityClass.EntityName)
            .AppendLine(");")
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();

        codeBuilder
            .AppendLine("/// <inheritdoc />")
            .Append("public static bool operator ==(")
            .Append(entityClass.EntityName)
            .Append("? left, ")
            .Append(entityClass.EntityName)
            .AppendLine("? right)")
            .AppendLine("{")
            .IncrementIndent()
            .Append("return Equals(left, right);")
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();

        codeBuilder
            .AppendLine("/// <inheritdoc />")
            .Append("public static bool operator !=(")
            .Append(entityClass.EntityName)
            .Append("? left, ")
            .Append(entityClass.EntityName)
            .AppendLine("? right)")
            .AppendLine("{")
            .IncrementIndent()
            .Append("return !Equals(left, right);")
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();
    }

    private static void GenerateHashCode(IndentedStringBuilder codeBuilder, EquatableClass entityClass)
    {
        codeBuilder
            .AppendLine("/// <inheritdoc />")
            .Append("public override int GetHashCode()")
            .AppendLine("{")
            .IncrementIndent();

        codeBuilder
            .AppendLine("int hashCode = -510739267;");

        foreach (var entityProperty in entityClass.Properties)
        {
            switch (entityProperty.ComparerType)
            {
                case ComparerTypes.Dictionary:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append("DictionaryHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine(");");
                    break;
                case ComparerTypes.HashSet:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append("HashSetHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine(");");
                    break;
                case ComparerTypes.Reference:
                    break;
                case ComparerTypes.Sequence:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append("SequenceHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine(");");
                    break;
                case ComparerTypes.String:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append("global::System.StringComparer.")
                        .Append(entityProperty.ComparerName)
                        .Append(".GetHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine("!);");
                    break;
                case ComparerTypes.Custom:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append(entityProperty.ComparerName)
                        .Append(".")
                        .Append(entityProperty.ComparerInstance ?? "Default")
                        .Append(".GetHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine("!);");
                    break;
                default:
                    codeBuilder
                        .Append("hashCode = (hashCode * -1521134295) + ")
                        .Append("global::System.Collections.Generic.EqualityComparer<")
                        .Append(entityProperty.PropertyType)
                        .Append(">.Default.GetHashCode(")
                        .Append(entityProperty.PropertyName)
                        .AppendLine("!);");
                    break;
            }
        }

        codeBuilder
            .AppendLine("return hashCode;")
            .AppendLine();

        GenerateHashCodeFunctions(codeBuilder, entityClass);

        codeBuilder
            .DecrementIndent()
            .AppendLine("}")
            .AppendLine();
    }

    private static void GenerateHashCodeFunctions(IndentedStringBuilder codeBuilder, EquatableClass entityClass)
    {
        if (entityClass == null)
            return;

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.Dictionary))
        {
            codeBuilder
                .AppendLine("static int DictionaryHashCode<TKey, TValue>(global::System.Collections.Generic.IDictionary<TKey, TValue>? items)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (items == null)")
                .AppendLine("    return 0;")
                .AppendLine();

            codeBuilder
                .AppendLine("int hashCode = -510739267;")
                .AppendLine()
                .AppendLine("// sort by key to ensure dictionary with different order are the same")
                .AppendLine("foreach (var item in items.OrderBy(d => d.Key))")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<TKey>.Default.GetHashCode(item.Key!);")
                .AppendLine("hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<TValue>.Default.GetHashCode(item.Value!);")
                .DecrementIndent()
                .AppendLine("}"); // foreach

            codeBuilder
                .AppendLine()
                .AppendLine("return hashCode;")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.HashSet))
        {
            codeBuilder
                .AppendLine("static int HashSetHashCode<T>(global::System.Collections.Generic.IEnumerable<T>? items)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (items == null)")
                .AppendLine("    return 0;")
                .AppendLine()
                .AppendLine("int hashCode = -114976970;")
                .AppendLine()
                .AppendLine("// sort to ensure set with different order are the same")
                .AppendLine("foreach (var item in items.OrderBy(s => s))")
                .AppendLine("    hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<T>.Default.GetHashCode(item!);")
                .AppendLine()
                .AppendLine("return hashCode;")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }

        if (entityClass.Properties.Any(p => p.ComparerType == ComparerTypes.Sequence))
        {
            codeBuilder
                .AppendLine("static int SequenceHashCode<T>(global::System.Collections.Generic.IEnumerable<T>? items)")
                .AppendLine("{")
                .IncrementIndent()
                .AppendLine("if (items == null)")
                .AppendLine("    return 0;")
                .AppendLine()
                .AppendLine("int hashCode = -114976970;")
                .AppendLine()
                .AppendLine("foreach (var item in items)")
                .AppendLine("    hashCode = (hashCode * -1521134295) + global::System.Collections.Generic.EqualityComparer<T>.Default.GetHashCode(item!);")
                .AppendLine()
                .AppendLine("return hashCode;")
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }
    }
}
